package config;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import com.travel_recommender.opta.Day;
import com.travel_recommender.opta.Spot;
import com.travel_recommender.opta.Solution;
import com.travel_recommender.opta.SpotSnippet;
import com.travel_recommender.opta.TimeCapsule
import com.travel_recommender.opta.SpotConsecutiveStart
import com.travel_recommender.opta.SpotConsecutiveEnd
import com.travel_recommender.opta.SpotConsecutiveSequence
import com.travel_recommender.opta.SpotFullyArranged
import com.travel_recommender.opta.TimeCapsuleAlreadyAssigned;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "One TimeCapsule to One Spotsnippet"
    salience 3
    when
        $onecapsule : TimeCapsule()
        $onesnippet : SpotSnippet($opid : id, timeCapsule == $onecapsule)
        $conflictNum : Number() from accumulate (
            SpotSnippet(id != $opid, timeCapsule == $onecapsule, $score : spot.getScore()),
            sum($score)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, - 10 * $conflictNum.intValue());
end
/*
rule "Continuous Arrangement within Period"
    salience 2
	when
		$leftcap : TimeCapsule($lcid : id)
        $spot : Spot()
		$leftsnippet : SpotSnippet(timeCapsule == $leftcap, spot == $spot, $siiS : snippetIndexInSpot)
        $rightcap : TimeCapsule($rcid : id)
        //SpotSnippet(spot == $spot, timeCapsule == $rightcap, snippetIndexInSpot == $siiS + 1)
        //SpotConsecutiveSequence($spot : spot, $spand : getEndCapsuleId() - getStartCaspsuleId(), $startcapsule : startCapsule, $endcapsule : endCapsule)
        $day : Day(timeCapsules contains $leftcap, timeCapsules contains $rightcap)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - (int) Math.abs($rcid - $lcid - $spot.getRequiredTimeCapsuleNum($day)));
end*/
/*
rule "insertSpotFullyArranged"
    when
        $day : Day($capduration : capsuleDuration)
        $spot : Spot($estdur : est_duration)
        SpotConsecutiveSequence(spot == $spot, endCapsule - startCapsule >= Math.ceil((float) $estdur / $capduration))
    then
        SpotFullyArranged spotFullyArranged = new SpotFullyArranged($spot, $day);
        System.out.println("Inserting" + spotFullyArranged);
        insertLogical(spotFullyArranged);
end

rule "insertTimeCapsuleAlreadyAssigned"
    salience 2
    when
        $capsule : TimeCapsule()
        $snippet : SpotSnippet(timeCapsule == $capsule)
    then
        System.out.println("TimeCapsule " + $capsule.getId() + "Already Assigned to snippet " + $snippet.getId());
        insertLogical(new TimeCapsuleAlreadyAssigned($capsule, $snippet));
end

rule "updateEmptySnippet"
    salience 1
    when
        $capsule : TimeCapsule()
        not TimeCapsuleAlreadyAssigned(timeCapsule == $capsule)
        $snippet : SpotSnippet(timeCapsule != null, $spot : spot)
        not SpotConsecutiveStart(spot == $spot)
    then
        update($snippet) {$snippet.setTimeCapsule($capsule);};
        System.out.println("Update snippet " + $snippet + " with capsule " + $capsule);
end

rule "bailing out snippet"
    when
        SpotFullyArranged($spot : spot)
        SpotConsecutiveSequence($startcapId: getStartCaspsuleId(), $endcapId : getEndCapsuleId())
        $capsule : TimeCapsule($cid : id)
        $snippet : SpotSnippet(spot == $spot, $cid < $startcapId || $cid > $endcapId)
    then
        update($snippet) {$snippet.setTimeCapsule(null);}
end

rule "insertSpotConsecutiveStart"
        salience 2
    when
        SpotSnippet($spot : spot, $leftcapsule : timeCapsule != null, $ssid : snippetIndexInSpot)
        not SpotSnippet(spot == $spot, timeCapsule != null, snippetIndexInSpot == $ssid - 1)
    then
        SpotConsecutiveStart spotConsecutiveStart = new SpotConsecutiveStart($spot, $leftcapsule);
        System.out.println(spotConsecutiveStart);
        insertLogical(spotConsecutiveStart);
end

rule "insertSpotConsecutiveEnd"
         salience 2
     when
         SpotSnippet($spot : spot, $leftcapsule : timeCapsule != null, $ssid : snippetIndexInSpot)
         not SpotSnippet(spot == $spot, timeCapsule != null, snippetIndexInSpot == $ssid + 1)
     then
         SpotConsecutiveEnd spotConsecutiveEnd = new SpotConsecutiveEnd($spot, $leftcapsule);
         System.out.println(spotConsecutiveEnd);
         insertLogical(spotConsecutiveEnd);
 end

rule "insertSpotConsecutiveSequence"
    salience 1
    when
        SpotConsecutiveStart($spot : spot, $startCapsule : timeCapsule)
        SpotConsecutiveEnd(spot == $spot, $endCapsule : timeCapsule)
        not SpotConsecutiveEnd(spot == $spot, timeCapsule >= $startCapsule && timeCapsule < $endCapsule)
    then
        SpotConsecutiveSequence spotConsecutiveSequence = new SpotConsecutiveSequence($spot, $startCapsule, $endCapsule);
        System.out.println(spotConsecutiveSequence);
        insertLogical(spotConsecutiveSequence);
end

rule "Append Spot Snippet to End of Sequence"
    when
        $emptycapsule : TimeCapsule()
        not TimeCapsuleAlreadyAssigned(timeCapsule == $emptycapsule)
        $spot : Spot()
        $day : Day(timeCapsules contains $emptycapsule)
        not SpotFullyArranged(spot == $spot, day == $day)
        $emptysnippet : SpotSnippet(spot == $spot, timeCapsule == null)
    then
        System.out.println("Appending spotsnippet to " + $spot + "on capsule: " + $emptycapsule);
        update($emptysnippet) {$emptysnippet.setTimeCapsule($emptycapsule);}
end
*/

rule "No visit Accross Days"
    when
        $leftcap : TimeCapsule($lcid : id)
        $rightcap : TimeCapsule($rcid : id)
        $leftday : Day(timeCapsules contains $leftcap, $ldid : id)
        $rightday : Day(timeCapsules contains $rightcap, id != $ldid)
        $spot : Spot()
        $leftsnippet : SpotSnippet(spot == $spot, timeCapsule == $leftcap)
        $rightsnippet : SpotSnippet(spot == $spot, timeCapsule == $rightcap)
        //SpotConsecutiveSequence($spot : spot, $startcapsule : startCapsule, $endcapsule : endCapsule)
        //$day : Day(timeCapsules contains $startcapsule, $dayIndex : id)
        //Day(timeCapsules contains $endcapsule, id > $dayIndex)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end// todo: change the value of hardconstraint

/*
rule "Visit Spot Once"
    salience 2
    when
        $leftcapsule : TimeCapsule($lcid : id)
        $day : Day(timeCapsules contains $leftcapsule)
        $spot : Spot()
        $leftsnippet : SpotSnippet( spot == $spot,
                                    timeCapsule == $leftcapsule,
                                    $lpid : id)
        $rightcapsule : TimeCapsule($rcid: id > $lcid)
        SpotSnippet(spot == $spot, timeCapsule == $rightcapsule, $rpid : id > $lpid)
    then
        int capsulenum = $spot.getRequiredTimeCapsuleNum($day);
		int totcapsulenumPerDay = $day.getRelativeTimeCapsuleIndex($day.getEnd_time());
        if (($rcid - $lcid != $rpid - $lpid) ||
			($rcid - $lcid > capsulenum - 1)) {
			System.out.println("lcid:" + $lcid + "rcid:" + $rcid + " - required:" + capsulenum);
            scoreHolder.addHardConstraintMatch(kcontext, 10 * ($lcid.intValue() - $rcid.intValue()));
        } else {
            scoreHolder.addSoftConstraintMatch(kcontext, 0);
        }
end*/

rule "visitSpotOnce"
    salience 2
    when
        $leftcapsule : TimeCapsule($lcid : id)
        $rightcapsule : TimeCapsule($rcid : id > $lcid + 1)
        $leftsnippet : SpotSnippet($spot : spot, timeCapsule == $leftcapsule, $ssid : snippetIndexInSpot)
        $rightsnippet : SpotSnippet(spot == $spot, timeCapsule == $rightcapsule, snippetIndexInSpot == $ssid + 1)
    then
        scoreHolder.addHardConstraintMatch(kcontext, $lcid.intValue() - $rcid.intValue());
end

rule "Reserve Gourmet Spots Exclusive to Meal Time"
    when
        $spot : Spot($gourmet : gourmet)
        $timecapsule : TimeCapsule($cid : id)
        $day : Day(timeCapsules contains $timecapsule)
        SpotSnippet(spot == $spot,  timeCapsule == $timecapsule)
    then
        if ( $day.notMealTime($cid) == $gourmet ) {
            scoreHolder.addHardConstraintMatch(kcontext, -1);
        } else {
            scoreHolder.addSoftConstraintMatch(kcontext, 0);
        }
end

rule "Reserve Travel Time Between Spots"
    //salience 2
    when
        $leftcapsule : TimeCapsule($leftcapsuleId : id)
        $day : Day(timeCapsules contains $leftcapsule)
        $leftspot : Spot($sid : id)
        $rightspot : Spot(id != $sid)
        $leftsnippet : SpotSnippet( spot == $leftspot,
                                    timeCapsule == $leftcapsule)
        $othercapsule : TimeCapsule(id != $leftcapsuleId)
        exists SpotSnippet( spot == $rightspot, snippetIndexInSpot == 0, timeCapsule == $othercapsule)
    then
        double travelcapsulenum = $rightspot.getTravelRequiredTimeCapNum($leftspot, $day);
        int capsulenum = $rightspot.getRequiredTimeCapsuleNum($day);
        if ($leftsnippet.getSnippetIndexInSpot() == capsulenum - 1 && $othercapsule.getId() - $leftcapsuleId < travelcapsulenum) {
            scoreHolder.addHardConstraintMatch(kcontext, -1);
        } else {
            scoreHolder.addSoftConstraintMatch(kcontext, 0);
        }
end

rule "No Exceed Time of Spot"
    //salience 1
    when
        $day : Day($timecapsules : timeCapsules)
        $totalScheduledCaps : Number() from accumulate (
            SpotSnippet(timeCapsule != null, $capsuleCost : getScore(), $timecapsules contains timeCapsule),
            sum($capsuleCost)
        )
    then
        int timeCapsuleTotNum = $day.getRelativeTimeCapsuleIndex($day.getEnd_time());
        if (timeCapsuleTotNum < $totalScheduledCaps.intValue()) {
            scoreHolder.addHardConstraintMatch(kcontext, timeCapsuleTotNum - $totalScheduledCaps.intValue());
        }
end

rule "Visit Within Time Window of Spot"
    when
        $capsule : TimeCapsule($cid : id)
        $day : Day(timeCapsules contains $capsule)
        $spot : Spot()
        SpotSnippet(spot == $spot, timeCapsule == $capsule, $snippetIndexInSpot : snippetIndexInSpot)
    then
        int opencapId = $spot.getOpenTimeCapId($day);
        int closecapId = $spot.getCloseTimeCapId($day);
        int requriedcapnum = $spot.getRequiredTimeCapsuleNum($day);
        if (($snippetIndexInSpot == 0 && $cid < opencapId)||($snippetIndexInSpot == (requriedcapnum - 1) && $cid > closecapId)) {
            // System.out.println($cid);
            scoreHolder.addHardConstraintMatch(kcontext, -1);
        } else {
            scoreHolder.addSoftConstraintMatch(kcontext, 0);
        }
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "Arrange Spot to its Fullest"
    when
        $day : Day()
        $spot : Spot($id : id)
        $totalCapsuleNumOfSpot : Number() from accumulate (
            SpotSnippet(spot == $spot,
                        timeCapsule : timeCapsule != null,
                        $score : score,
                        $day.getTimeCapsules() contains timeCapsule),
            sum($score)
        )
    then
        int requiredTimeCapsuleNum = $spot.getRequiredTimeCapsuleNum($day);
        scoreHolder.addSoftConstraintMatch(kcontext, $totalCapsuleNumOfSpot.intValue() - requiredTimeCapsuleNum);
end

rule "Minimize Travel Time"
    when
        $leftcapsule : TimeCapsule($lcid : id)
        $rightcapsule : TimeCapsule($rcid : id != $lcid)
        $day : Day(timeCapsules contains $leftcapsule, timeCapsules contains $rightcapsule)
        $leftspot : Spot($lsid : id)
        $leftsnippet : SpotSnippet(spot == $leftspot, timeCapsule == $leftcapsule, $snippetIndexInSpot : snippetIndexInSpot)
        $rightspot : Spot(id != $lsid)
        exists SpotSnippet(spot == $rightspot, timeCapsule == $rightcapsule, snippetIndexInSpot == 0)
    then
        int capsulenum = $leftspot.getRequiredTimeCapsuleNum($day);
        int travelcapNum = $rightspot.getTravelRequiredTimeCapNum($leftspot, $day);
        if ($snippetIndexInSpot == (capsulenum - 1)) {
            scoreHolder.addSoftConstraintMatch(kcontext, - travelcapNum);
        }
        // System.out.println("Travel caps between " + $lsid + " and " + $rightspot.id + " = " + travelcapNum);
end

rule "Minimize unmatched SpotSnippet"
    when
        $totalUnmatchedSpotScore : Number() from accumulate (
            SpotSnippet($spotScore : getScore(), timeCapsule == null),
            sum($spotScore)
        )
    then
        // System.out.println("Total unmatched Spot Snippets: " + $totalUnmatchedSpotScore);
        scoreHolder.addSoftConstraintMatch(kcontext, - $totalUnmatchedSpotScore.intValue());
end

rule "Compact Schedule Earlier"
    when
        $day : Day($did : id, $timecapsules : timeCapsules)
        $capNum : Number() from accumulate (
            SpotSnippet($timecapsules contains timeCapsule, $score : score),
            sum($score)
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $did.intValue() * $capNum.intValue());
end
